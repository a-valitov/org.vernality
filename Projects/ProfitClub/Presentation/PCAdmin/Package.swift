// swift-tools-version:5.3
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "PCAdmin",
    platforms: [.iOS(.v11)],
    products: [
        .library(
            name: "PCAdmin",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminAction",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminActions",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminCommercialOfffer",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminCommercialOffers",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminOrganization",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminOrganizations",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminSupplier",
            targets: ["PCAdmin"]),
        .library(
            name: "PCAdminSuppliers",
            targets: ["PCAdmin"]),
    ],
    dependencies: [
        .package(path: "../../Model/PCModel"),
        .package(path: "../../Services/PCUserService"),
        .package(path: "../../Services/PCActionService"),
        .package(path: "../../Services/PCCommercialOfferService"),
        .package(path: "../../Services/PCSupplierService"),
        .package(path: "../../Services/PCOrganizationService"),
        .package(path: "../../../../Pods/Packages/ErrorPresenter"),
        .package(path: "../../../../Pods/Packages/MenuPresenter"),
        .package(path: "../../../../Pods/Packages/ConfirmationPresenter"),
        .package(path: "../../../../Pods/Packages/ActivityPresenter"),
        .package(path: "../../../../Pods/Packages/Raise"),
        .package(path: "../../../../Pods/Utils/BundleUtils"),
        .package(url: "https://github.com/onevcat/Kingfisher.git", from: "6.0.1"),
    ],
    targets: [
        .target(
            name: "PCAdmin",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "PCAdminAction",
                "PCAdminActions",
                "PCAdminCommercialOffer",
                "PCAdminCommercialOffers",
                "PCAdminOrganization",
                "PCAdminOrganizations",
                "PCAdminSupplier",
                "PCAdminSuppliers",
            ]),
        .target(
            name: "PCAdminAction",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminActions",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminCommercialOffer",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminCommercialOffers",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminOrganization",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminOrganizations",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminSupplier",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .target(
            name: "PCAdminSuppliers",
            dependencies: [
                .product(name: "PCUserServiceStub", package: "PCUserService"),
                .product(name: "PCActionServiceStub", package: "PCActionService"),
                .product(name: "PCOrganizationServiceStub", package: "PCOrganizationService"),
                .product(name: "PCSupplierServiceStub", package: "PCSupplierService"),
                .product(name: "PCCommercialOfferServiceStub", package: "PCCommercialOfferService"),
                "PCModel",
                "BundleUtils",
                "PCUserService",
                "PCSupplierService",
                "PCOrganizationService",
                "ErrorPresenter",
                "ConfirmationPresenter",
                "ActivityPresenter",
                "MenuPresenter",
                "Raise",
                "Kingfisher",
            ]),
        .testTarget(
            name: "PCAdminTests",
            dependencies: ["PCAdmin"]),
    ]
)
